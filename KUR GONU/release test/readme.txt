버그 제보 및 제안은 
kur941017@gmail.com
메일로 보내주세요!


KUR GONU는 .gonu파일을 통해 게임의 데이터를 입력함으로써 게임의 확장성을 높였습니다.
이 문서는 .gonu파일을 만드는 법과 그 형식을 설명하는 문서입니다.

Visual Studio(확장자를 .txt에서 .c로 바꾸고 엽니다)나 colorscripter등의 텍스트 편집기에서 이 문서를 열 경우 훨씬 알아보기 쉽습니다.

simple.gonu를 예로 들어 설명합니다.

25 // 게임판의 전체 교차점의 갯수이고 아래 교차점에 대한 정보들을 모아 놓은 행들의 수입니다. 
//x     y      표시  p1출입가능 p2출입가능    txtColor   occupier
2	1	*	1	1	15	0	0 // 2	1은 좌표입니다.(x,y)
39	1	$	0	1	15	0	0 // *, $, +은 맵에 표시될 교차점의 문자를 나타냅니다. 
78	1	*	1	1	15	0	0 //  *는 1p의 말이 놓일 수 있는 곳. +은 2p의 말이 놓일 수 있는 곳.
14	7	*	1	1	15	0	0 //  $은 각 플레이어의 성을 의미합니다.
39	7	*	1	1	15	0	0
65	7	*	1	1	15	0	0 // *,$,+ 다음의 두 숫자는 출입 가능/불가능을 결정합니다. 
26	13	,	1	1	15	0	0 // 즉 1p의 성엔 1p가 못들어가고 2p의 성엔 2p가 못들어갑니다.
39	13	,	1	1	15	0	0 // $로 표시하기만 해서는 성이되지 않습니다. 출입가능/불가를 저장해줘야합니다.
52	13	,	1	1	15	0	0
2	19	,	1	1	15	0	0 // 그 다음 15 0는 교차점의 색을 표시합니다. 15는 white, 0은 black입니다.
14	19	,	1	1	15	0	0 // 그냥 15 0으로 두십시오.
26	19	,	1	1	15	0	0
39	19	,	1	1	15	0	0 // 그 다음의 0은 설정할 필요 없는 값입니다.
52	19	,	1	1	15	0	0 // 그냥 0으로 두십시오.
65	19	,	1	1	15	0	0
78	19	,	1	1	15	0	0
26	25	,	1	1	15	0	0
39	25	,	1	1	15	0	0
52	25	,	1	1	15	0	0
14	31	+	1	1	15	0	0 // 교차점에 표시되는 문자는 *,+ 만이 의미를 가집니다. 그러므로 절대로 바꿔서는 안됩니다.
39	31	+	1	1	15	0	0 // 그 외에 $나 ,는 의미가 없습니다. 특히 성은 1,2p의 출입가능성으로 판단됩니다. 
65	31	+	1	1	15	0	0 // 어떤 행의 정점을 $로 표시하는 것은 그 정점이 성이 되는 것에 전혀 영향을 미치지 않습니다.
2	38	+	1	1	15	0	0
39	38	$	1	0	15	0	0
78	38	+	1	1	15	0	0
L // L은 인접 정점 인덱스 List의 L입니다. 인접인덱스리스트는 아래와 같이 구성되며 그래프의 간선 정보를 저장합니다.
  // 위 정점 저장 정보에서 각각의 '행'은 정점의 id를 의미합니다. 현재 행의 정점과 연결하고 싶은 id의 정점을 기록하세요.
  // 그래프는 무향그래프이므로 id를 한번만 써놓으면 됩니다.
1	3	9 // 위 정점 설정에서 0행에 해당하는 정점이 1행, 3행, 9행과 연결되었음을 의미합니다.
2	4
5	15
4	6	10
5	7
8	14
7	11	12
8	12
12	13
10	22
11	19
12	16
13	16	17	18 // 12행에 해당하는 정점은 13행, 16행, 17행, 18행에 해당하는 정점과 연결되어있습니다.
14	18
15	21
24
17	19
18	20
21
20	22
21	23
24
23
24
15
N // 게임 말piece에 대한 정보를 저장합니다. N은 normal deploy mode의 N입니다. 여기에 F를 입력한다면 다른 방식으로 파일을 만들어야합니다. 뒤에서 설명할 것입니다.
5 // 1p가 가질 수 있는 말의 갯수를 의미하며 아래 정보들의 행 수를 의미합니다. 각각의 말이 가진 '행'은 말의 id인 pieceId가 됩니다.
교차점
id       txtColor     range   stackable
0	15	0	1	0
2	15	0	1	0 // 교차점 id는 위 정점 저장 정보에서의 행을 의미합니다. 즉 pieceId 1은 정점id가 2인 정점에 놓여집니다.
3	15	0	1	0 // pieceId = 2인 말은 정점id 3에 놓여집니다.
4	15	0	1	0
5	15	0	1	0 // txtColor는 그냥 15 0을 쓰면 됩니다.
5 // 2p가 가질 수 있는 말의 갯수.
19	15	0	1	0 // range는 말의 공격범위를 지정합니다. 1은 ●이고 1칸을 움직입니다. 2는 ★이고 2칸을 움직입니다.
20	15	0	1	0 
21	15	0	1	0
22	15	0	1	0 // stackable은 무의미한 값입니다. 0을 넣으면 됩니다.
24	15	0	1	0
end //반드시 공백이나 줄바꿈 없는 end로 끝내야합니다.


말 정보 저장 시 N이 아닌 F인 경우 : free deploy mode.
free.gonu를 예시로 설명합니다.

25
2	1	*	1	1	15	0	0 // 반드시 1p의 말이 놓일 수 있는 곳은 *
39	1	$	0	1	15	0	0
78	1	*	1	1	15	0	0
14	7	*	1	1	15	0	0
39	7	*	1	1	15	0	0
65	7	*	1	1	15	0	0
26	13	*	1	1	15	0	0
39	13	*	1	1	15	0	0
52	13	*	1	1	15	0	0
2	19	,	1	1	15	0	0
14	19	,	1	1	15	0	0
26	19	,	1	1	15	0	0
39	19	,	1	1	15	0	0
52	19	,	1	1	15	0	0
65	19	,	1	1	15	0	0
78	19	,	1	1	15	0	0
26	25	+	1	1	15	0	0 // 2p가 말을 놓을 수 있는 곳은 +이다.
39	25	+	1	1	15	0	0
52	25	+	1	1	15	0	0
14	31	+	1	1	15	0	0
39	31	+	1	1	15	0	0
65	31	+	1	1	15	0	0
2	38	+	1	1	15	0	0
39	38	$	1	0	15	0	0
78	38	+	1	1	15	0	0
L
1	3	9
2	4
5	15
4	6	10
5	7
8	14
7	11	12
8	12
12	13
10	22
11	19
12	16
13	16	17	18
14	18
15	21
24
17	19
18	20
21
20	22
21	23
24
23
24
15 // 어느곳과도 연결되지 않은 정점이 있으면 안됩니다. 15는 중복되는 간선이지만 한번 더 써주십시오.
F // free deploy mode의 F 입니다. 이 mode는 1p는 *인 교차점에 말을 할당할 수 있게 하고, 2p는 +에 말을 할당할 수 있게 한다.
●	★	③	④	⑤
5	2	0	0	0
// 5는 range가 1인 ● 말의 갯수를 의미합니다. 2는 range가 2인 ★ 말의 갯수를 의미합니다.
// 0은 range가 3인 ③ 말의 갯수를 의미합니다. 0은 range가 4인 ④ 말의 갯수를 의미합니다. 0은 range가 5인 ⑤ 말의 갯수를 의미합니다.
end //반드시 공백이나 줄바꿈 없는 end로 끝내야합니다.

만일 end가 아닌 다른 문자가 온다면 그 문자가 맵의 간선을 표시할 때 사용됩니다. custom2는 #로 끝나기 때문에 #가 간선을 표시하는데 사용됩니다.

(생략)
F
2	2	2	2	2
#  // <--이경우 '#'이 간선을 그을 때 사용됩니다.
end

